import json
import boto3
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

client = boto3.client('s3')
destination_bucket = "media-app-resized-image-1"
exclude_keys = {'cover/', 'post/', 'profile/'}

image_sizes = {
    'cover': (100, 100),  
    'profile': (500, 500),  
    'post': (1000, 1000)  
}

watermark_text = "Codenera"
font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"  
font_size = 16  

def add_watermark(image, text):
    draw = ImageDraw.Draw(image)
    
    try:
        font = ImageFont.truetype(font_path, font_size)
    except IOError:
        font = ImageFont.load_default()

    textwidth, textheight = draw.textsize(text, font)
    
    width, height = image.size
    x = width - textwidth - 10
    y = height - textheight - 10

    draw.text((x, y), text, font=font, fill=(0, 255, 255, 128))  

    return image

def resizer(img, key):
    image_type = key.split("/")[0]
    
    if image_type in image_sizes:
        resized_image = img.resize(image_sizes[image_type])
        
        watermarked_image = add_watermark(resized_image, watermark_text)

        temp_buffer = BytesIO()
        watermarked_image.save(temp_buffer, format=img.format)
        resized_bytes = temp_buffer.getvalue()

        client.put_object(Body=resized_bytes, Bucket=destination_bucket, Key=key)
        logger.info(f"Image resized and uploaded to {destination_bucket} with key: {key}")

def download_image(bucket_name, key):
    logger.info(f"Downloading image from bucket: {bucket_name}, key: {key}")
    response = client.get_object(Bucket=bucket_name, Key=key)
    return response['Body'].read()

def lambda_handler(event, context):
    logger.info(f"Event received: {json.dumps(event)}")
    try:
        for item in event['Records']:
            s3_event = json.loads(item['body'])
            
            if 'Event' in s3_event and s3_event['Event'] == 's3:TestEvent':
                logger.info("Test Event")
            else:
                for item in s3_event['Records']:
                    source_bucket = item['s3']['bucket']['name']
                    key = item['s3']['object']['key']
                    logger.info(f"Processing image with key: {key} from bucket: {source_bucket}")
                    
                    if key not in exclude_keys:
                        image_content = download_image(source_bucket, key)
                        
                        with Image.open(BytesIO(image_content)) as img:
                            img.format 
                            resizer(img, key)
                        
    except Exception as exception:
        logger.error(f"An error occurred: {exception}")
        raise exception